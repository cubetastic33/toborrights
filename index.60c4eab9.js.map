{"mappings":"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","sources":["scripts/order.ts"],"sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\nimport $ from \"cash-dom\";\n\n// Create a single supabase client for interacting with your database\nconst supabase = createClient(\"https://gwcnruxqmtukvguyhuga.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd3Y25ydXhxbXR1a3ZndXlodWdhIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NDk5MjI5MTIsImV4cCI6MTk2NTQ5ODkxMn0.Cpm-Myt5YdzFrRzYcWWaFxVDiyQWeJCD3dTZBvRlcp4\");\n\nconst $toast = $(\"#toast\");\nconst $status = $(\"#status\");\nconst $signed_out = $(\"#signed-out\");\nconst $restaurants = $(\"#restaurants\");\nconst $order_details = $(\"#order-details\");\nconst $sign_in = $(\"#sign-in\");\nconst $my_orders = $(\"#my-orders\");\nconst $order_list = $(\"#order-list\");\n\nfunction show_toast(message: string, duration: number = 2000) {\n    $toast.text(message).show();\n    // After duration, slide the toast out of view\n    setTimeout(() => $toast.addClass(\"slide-down\"), duration);\n    setTimeout(() => $toast.removeClass(\"slide-down\").hide(), duration + 500);\n}\n\nfunction update_dom() {\n    let user = supabase.auth.user();\n    if (user === null) {\n        // If the user is signed out\n        $status.hide();\n        $signed_out.show();\n        $order_details.hide();\n        $my_orders.hide();\n        $restaurants.show().removeClass(\"fade\");\n    } else {\n        // If the user is signed in\n        $signed_out.hide();\n        $(\".netid\").text(user.email.slice(0, -13).toUpperCase());\n        $status.show();\n        insert_orders();\n    }\n}\n\n// Run once initially\nupdate_dom();\n// Run whenever auth state changes\nsupabase.auth.onAuthStateChange(update_dom);\n\nfunction insert_orders() {\n    supabase\n        .from(\"orders\")\n        .select(\"id, time_slot, restaurants (name), delivery_location, description, fulfilled, notes, cost\")\n        .filter(\"cancelled\", \"eq\", \"false\")\n        .order(\"created_at\", { ascending: false })\n        .then(result => {\n            if (result.error) {\n                show_toast(result.error.message, 5000);\n            }\n            if (result.data.length === 0) {\n                $my_orders.hide();\n                return;\n            } else $my_orders.show();\n            $order_list.empty();\n            for (let i = 0; i < result.data.length; i++) {\n                let new_order = $(`<div class=\"order\">\n                    <b>Timeslot:</b> ${result.data[i][\"time_slot\"]}<br>\n                    <b>Restaurant:</b> ${result.data[i][\"restaurants\"][\"name\"]}<br>\n                    <b>Description:</b> ${result.data[i][\"description\"]}<br>\n                    <b>Delivery Location:</b> ${result.data[i][\"delivery_location\"]}<br>\n                    <b>Donation:</b> ${result.data[i][\"cost\"]}\n                </div>`);\n                if (result.data[i][\"notes\"])\n                    new_order.append(`<b>Phone:</b> ${result.data[i][\"notes\"]}`);\n                if (result.data[i][\"fulfilled\"])\n                    new_order.append(`<span class=\"top-right\">Fulfilled</span>`);\n                else\n                    new_order.append(`<span class=\"top-right\">\n                        <button class=\"text cancel\" data-id=\"${result.data[i][\"id\"]}\">cancel</button>\n                    </span>`);\n                $order_list.append(new_order);\n            }\n            $(\".cancel\").off().on(\"click\", function() {\n                supabase\n                    .from(\"orders\")\n                    .update({ cancelled: true })\n                    .match({ id: $(this).data(\"id\") })\n                    .then(result => {\n                        if (result.error) show_toast(result.error.message);\n                        else show_toast(\"Cancelled order\");\n                    });\n            });\n        }, error => show_toast(error, 5000));\n}\n\nsupabase\n    .from(\"orders\")\n    .on(\"*\", payload => {\n        console.log('Change received!', payload);\n        insert_orders();\n    })\n    .subscribe();\n\n$(\"#sign-out\").on(\"click\", () => supabase.auth.signOut()\n    .then(_response => {\n        show_toast(\"Signed out successfully\");\n    })\n    .catch(err => show_toast(err.response.text)));\n\n// Dynamically populate the list of restaurants from the database\nsupabase\n    .from(\"restaurants\")\n    .select()\n    .then(result => {\n        if (result.error) {\n            show_toast(result.error.message, 5000);\n        } else if (result.data.length === 0) {\n            show_toast(\"No restaurants were found\", 5000);\n        } else {\n            for (let i = 0; i < result.data.length; i++) {\n                const { error, publicURL } = supabase.storage.from(\"restaurant-images\").getPublicUrl(result.data[i][\"image\"]);\n                if (error) {\n                    show_toast(error.message, 5000);\n                    return;\n                }\n                let id = result.data[i][\"id\"];\n                let name = result.data[i][\"name\"];\n                let menu = result.data[i][\"menu\"];\n                $restaurants.append(`<div class=\"restaurant\"\n                    data-id=\"${id}\" data-name=\"${name}\" data-menu=\"${menu}\"\n                    style=\"background-image: url('${publicURL}')\">\n                        <h1>${name}</h1>\n                    </div>`);\n            }\n            // Add event handlers for all the restaurant buttons\n            $(\".restaurant\").on(\"click\", function() {\n                // Analytics\n                let name = $(this).data(\"name\");\n                // @ts-ignore\n                if (typeof pa !== \"undefined\") pa.track({name});\n                // Replace the list of restaurants with something else, so hide it\n                // Fade-out animation\n                $restaurants.addClass(\"fade\");\n                setTimeout(() => {\n                    $restaurants.hide();\n                    if (supabase.auth.user()) {\n                        // If the user is signed in, proceed with the order\n                        $order_details.data(\"id\", $(this).data(\"id\")).show();\n                        if ($(this).data(\"menu\")) {\n                            $(\"#order-details .menu a\").attr(\"href\", $(this).data(\"menu\"));\n                            $(\"#order-details .menu span\").css(\"display\", \"inline\");\n                        } else {\n                            $(\"#order-details .menu span\").hide();\n                        }\n                        $(\"#order-details .name\").text(name);\n                    } else {\n                        // If they're not signed in, make them sign in first\n                        $sign_in.show();\n                    }\n                }, 100);\n            });\n        }\n    }, error => show_toast(error, 5000));\n\n$sign_in.on(\"submit\", e => {\n    e.preventDefault();\n    // Sign the user in\n    const email: string = $(\"#netid\").val() + \"@utdallas.edu\";\n    supabase.auth.signIn({ email })\n        .then(response => {\n            if (response.error) {\n                show_toast(response.error.message, 5000);\n            } else {\n                $(\"body\").html(`<div id=\"check-email\">Check ${email} for a magic link to login</div>`);\n            }\n        })\n        .catch(err => show_toast(err.response.text));\n});\n\n$(\".back\").on(\"click\", () => {\n    $sign_in.hide();\n    $order_details.hide();\n    $restaurants.show().removeClass(\"fade\");\n});\n\n$order_details.on(\"submit\", e => {\n    e.preventDefault();\n    // Make the order by adding it to the database\n    const phone = $(\"#phone\").val();\n    const identifier = $(\"#identifier\").val();\n    supabase\n        .from(\"orders\")\n        .insert({\n            time_slot: $(\"#time-slot\").val(),\n            customer: supabase.auth.user().id,\n            restaurant: $order_details.data(\"id\"),\n            delivery_location: $(\"#location\").val(),\n            description: $(\"#description\").val(),\n            identifier: identifier.length ? identifier : null,\n            notes: phone.length ? phone : null,\n            cost: $(\"#donation\").val(),\n        })\n        .then((result) => {\n            if (result.error) {\n                show_toast(result.error.message, 5000);\n            } else {\n                show_toast(\"Order placed successfully!\");\n                // Reset forms and show restaurant list\n                $(\"form\").trigger(\"reset\");\n                $order_details.hide();\n                $restaurants.show().removeClass(\"fade\");\n            }\n        }, error => show_toast(error, 5000));\n});\n"],"names":["$7JJcr","parcelRequire","$d9a3dd6674cb0243$var$supabase","createClient","$d9a3dd6674cb0243$var$$toast","$parcel$interopDefault","$gOFYb","$d9a3dd6674cb0243$var$$status","$d9a3dd6674cb0243$var$$signed_out","$d9a3dd6674cb0243$var$$restaurants","$d9a3dd6674cb0243$var$$order_details","$d9a3dd6674cb0243$var$$sign_in","$d9a3dd6674cb0243$var$$my_orders","$d9a3dd6674cb0243$var$$order_list","$d9a3dd6674cb0243$var$show_toast","message","duration","text","show","setTimeout","addClass","removeClass","hide","$d9a3dd6674cb0243$var$update_dom","user","auth","email","slice","toUpperCase","$d9a3dd6674cb0243$var$insert_orders","from","select","filter","order","ascending","then","result1","error","data","length","empty","i","new_order","append","off","on","update","cancelled","match","id","this","result","onAuthStateChange","payload","console","log","subscribe","signOut","_response","catch","err","response","publicURL","storage","getPublicUrl","name","menu","pa","track","attr","css","e","preventDefault","val","signIn","html","phone","identifier","insert","time_slot","customer","restaurant","delivery_location","description","notes","cost","trigger"],"version":3,"file":"index.60c4eab9.js.map"}